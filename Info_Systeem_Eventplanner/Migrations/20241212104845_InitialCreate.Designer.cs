// <auto-generated />
using System;
using Info_Systeem_Eventplanner.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Info_Systeem_Eventplanner.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241212104845_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Info_Systeem_Eventplanner.Models.AppUser", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TelephoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.ToTable("AppUsers");

                    b.HasData(
                        new
                        {
                            UserID = 1,
                            Email = "JornNeiss@gmail.com",
                            IsAdmin = false,
                            Name = "Jörn Neiss"
                        },
                        new
                        {
                            UserID = 2,
                            Email = "CharlesBenschop@gmail.com",
                            IsAdmin = false,
                            Name = "Charles Benschop"
                        },
                        new
                        {
                            UserID = 3,
                            Email = "JoopBuyt@gmail.com",
                            IsAdmin = false,
                            Name = "Joop Buyt"
                        });
                });

            modelBuilder.Entity("Info_Systeem_Eventplanner.Models.Event", b =>
                {
                    b.Property<int>("EventID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventID"));

                    b.Property<int?>("AppUserUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventDescription")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("MaxParticipants")
                        .HasColumnType("int");

                    b.Property<int>("Participants")
                        .HasColumnType("int");

                    b.HasKey("EventID");

                    b.HasIndex("AppUserUserID");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            EventID = 1,
                            DateTime = new DateTime(2025, 1, 24, 11, 48, 44, 979, DateTimeKind.Local).AddTicks(3832),
                            EventDescription = "Een spannende Serie A wedstrijd tussen 2 titelkandidaten Ac Milan en Napoli.",
                            EventName = "AC Milan - Napoli",
                            ImagePath = "/images/ACMilan",
                            MaxParticipants = 100,
                            Participants = 0
                        },
                        new
                        {
                            EventID = 2,
                            DateTime = new DateTime(2024, 12, 24, 11, 48, 44, 979, DateTimeKind.Local).AddTicks(3879),
                            EventDescription = "De spannende 3. Bundesliga wedstrijd tussen Alemannia Aachen en RW Essen.",
                            EventName = "Alemannia Aachen - RW Essen",
                            ImagePath = "/images/Alemannia",
                            MaxParticipants = 10000,
                            Participants = 0
                        },
                        new
                        {
                            EventID = 3,
                            DateTime = new DateTime(2025, 1, 8, 11, 48, 44, 979, DateTimeKind.Local).AddTicks(3882),
                            EventDescription = "De derby van het zuiden de Keukenkampioen divisie wedstrijd tussen Roda JC Kerkrade en MVV Maastricht.",
                            EventName = "Roda JC - MVV Maastricht",
                            ImagePath = "/images/RodaJCMVV",
                            MaxParticipants = 14000,
                            Participants = 0
                        });
                });

            modelBuilder.Entity("Info_Systeem_Eventplanner.Models.Ticket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketId"));

                    b.Property<int>("EventID")
                        .HasColumnType("int");

                    b.Property<bool?>("IsReserved")
                        .HasColumnType("bit");

                    b.Property<float>("TicketPrice")
                        .HasColumnType("real");

                    b.HasKey("TicketId");

                    b.HasIndex("EventID");

                    b.ToTable("Tickets");

                    b.HasData(
                        new
                        {
                            TicketId = 1,
                            EventID = 1,
                            IsReserved = true,
                            TicketPrice = 39f
                        },
                        new
                        {
                            TicketId = 2,
                            EventID = 2,
                            IsReserved = false,
                            TicketPrice = 20f
                        },
                        new
                        {
                            TicketId = 3,
                            EventID = 3,
                            IsReserved = false,
                            TicketPrice = 15f
                        });
                });

            modelBuilder.Entity("Info_Systeem_Eventplanner.Reservation", b =>
                {
                    b.Property<int>("ReservationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReservationID"));

                    b.Property<DateTime>("Active")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ReservationID");

                    b.HasIndex("EventID");

                    b.HasIndex("UserID");

                    b.ToTable("Reservations");

                    b.HasData(
                        new
                        {
                            ReservationID = 1,
                            Active = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventID = 1,
                            UserID = 1
                        },
                        new
                        {
                            ReservationID = 2,
                            Active = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventID = 2,
                            UserID = 2
                        },
                        new
                        {
                            ReservationID = 3,
                            Active = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EventID = 3,
                            UserID = 3
                        });
                });

            modelBuilder.Entity("Info_Systeem_Eventplanner.Models.Event", b =>
                {
                    b.HasOne("Info_Systeem_Eventplanner.Models.AppUser", null)
                        .WithMany("Events")
                        .HasForeignKey("AppUserUserID");
                });

            modelBuilder.Entity("Info_Systeem_Eventplanner.Models.Ticket", b =>
                {
                    b.HasOne("Info_Systeem_Eventplanner.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Info_Systeem_Eventplanner.Reservation", b =>
                {
                    b.HasOne("Info_Systeem_Eventplanner.Models.Event", "Event")
                        .WithMany("Reservations")
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Info_Systeem_Eventplanner.Models.AppUser", "AppUser")
                        .WithMany("reservations")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Info_Systeem_Eventplanner.Models.AppUser", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("reservations");
                });

            modelBuilder.Entity("Info_Systeem_Eventplanner.Models.Event", b =>
                {
                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
